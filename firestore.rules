rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default: deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Hilfsfunktionen
    
    // Prüft, ob der Benutzer ein Admin ist
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // Prüft, ob der Benutzer ein Provider ist - MIT ROLLENPRÜFUNG
    function isProvider() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/providers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/providers/$(request.auth.uid)).data.role == "provider";
    }
    
    // Prüft, ob der Benutzer ein Customer ist - MIT ROLLENPRÜFUNG
    function isCustomer() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/customers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/customers/$(request.auth.uid)).data.role == "customer";
    }
    
    // Prüft, ob es sich um den eigenen Datensatz handelt
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Prüft, ob eine Abfrage das angegebene Feld mit dem angegebenen Wert filtert
    function hasFieldFilter(field, value) {
      return request.query.filters != null && 
             request.query.filters.fieldPath == field && 
             request.query.filters.op == "==" && 
             request.query.filters.value == value;
    }
    
    // User Metadata Collection
    match /user_metadata/{docId} {
      allow read, write: if request.auth != null;
    }
    
    // Regeln für Customer Collection
    match /customers/{customerId} {
      // Lesen: Eigene Daten, Provider für Kunden
      allow get: if isOwner(customerId) || isProvider() || isAdmin();
      
      // Abfragen auf die Collection
      allow list: if request.auth != null && 
                  request.query.limit <= 500 && 
                  (isProvider() || isAdmin());
      
      // Erstellen: Nur der Benutzer selbst oder Admins
      allow create: if isOwner(customerId) || isAdmin();
      
      // Aktualisieren: Nur der Benutzer selbst oder Admins
      allow update: if isOwner(customerId) || isAdmin();
      
      // Löschen: Nur der Benutzer selbst oder Admins
      allow delete: if isOwner(customerId) || isAdmin();
    }
    
    // Regeln für Provider Collection
    match /providers/{providerId} {
      // Lesen: Für jeden zugänglich (Anbieterinfos sind öffentlich)
      allow read: if true;
      
      // Erstellen: Nur während der Registrierung
      allow create: if request.auth != null && (
        providerId == request.auth.uid || 
        request.resource.data.id == request.auth.uid ||
        isAdmin()
      );
      
      // Aktualisieren: Nur der Provider selbst oder Admins
      allow update: if isOwner(providerId) || isAdmin();
      
      // Löschen: Nur der Provider selbst oder Admins
      allow delete: if isOwner(providerId) || isAdmin();
    }
    
    // Regeln für Services Collection
    match /services/{serviceId} {
      // Lesen: Für jeden zugänglich
      allow read: if true;
      
      // Schreiben: Nur der zugehörige Provider mit Provider-Rolle oder Admins
      allow write: if 
        request.auth != null && 
        (
          (request.resource.data.providerId == request.auth.uid && isProvider()) || 
          (resource.data != null && resource.data.providerId == request.auth.uid && isProvider()) || 
          isAdmin()
        );
    }
    
    // Regeln für Appointments Collection - VEREINFACHTE UND VERBESSERTE REGELN
    match /appointments/{appointmentId} {
      // Direktes Lesen eines Dokuments - mit Rollenprüfung
      allow get: if 
        request.auth != null && 
        (
          (resource.data.providerId == request.auth.uid && isProvider()) || 
          (resource.data.customerId == request.auth.uid && isCustomer()) || 
          isAdmin()
        );
      
      // GEÄNDERTE LIST-REGELN mit verbesserter Flexibilität für Provider
      allow list: if 
        request.auth != null && 
        request.query.limit <= 500 &&
        (
          // Provider dürfen alle ihre Termine sehen (auch ohne explicit filter)
          isProvider() ||
          
          // Kunden dürfen nur ihre eigenen Termine sehen
          (isCustomer() && hasFieldFilter("customerId", request.auth.uid)) ||
          
          // Admins dürfen alles sehen
          isAdmin()
        );
      
      // Erstellen: Nur angemeldete Benutzer mit korrekter Rolle
      allow create: if 
        request.auth != null && 
        (
          (request.resource.data.providerId == request.auth.uid && isProvider()) || 
          (request.resource.data.customerId == request.auth.uid && isCustomer())
        );
      
      // Aktualisieren: Nur zugehörige Provider und Kunden mit korrekter Rolle oder Admins
      allow update: if 
        request.auth != null && 
        (
          (resource.data.providerId == request.auth.uid && isProvider()) || 
          (resource.data.customerId == request.auth.uid && isCustomer()) || 
          isAdmin()
        );
      
      // Löschen: Nur zugehörige Provider mit Provider-Rolle oder Admins
      allow delete: if 
        request.auth != null && 
        (
          (resource.data.providerId == request.auth.uid && isProvider()) || 
          isAdmin()
        );
    }
    
    // Regeln für Reviews Collection
    match /reviews/{reviewId} {
      // Lesen: Für jeden zugänglich
      allow read: if true;
      
      // Erstellen: Nur Kunden können Bewertungen erstellen
      allow create: if 
        request.auth != null && isCustomer() && 
        request.resource.data.customerId == request.auth.uid;
      
      // Aktualisieren: Nur der Ersteller mit Kunden-Rolle
      allow update: if 
        request.auth != null && 
        resource.data.customerId == request.auth.uid &&
        isCustomer();
      
      // Löschen: Nur der Ersteller mit Kunden-Rolle oder Admins
      allow delete: if 
        request.auth != null && 
        (
          (resource.data.customerId == request.auth.uid && isCustomer()) || 
          isAdmin()
        );
    }
    
    // Regeln für providerCustomerRelations Collection - MIT ROLLENPRÜFUNG
    match /providerCustomerRelations/{relationId} {
      // Erlaubt Lesen, wenn der Benutzer angemeldet ist und eine Rolle hat
      allow read: if request.auth != null && (isProvider() || isCustomer() || isAdmin());
      
      // Erstellen und Update bleiben eingeschränkt auf beteiligte Parteien mit korrekten Rollen
      allow create, update: if 
        request.auth != null && 
        (
          (request.resource.data.providerId == request.auth.uid && isProvider()) || 
          (request.resource.data.customerId == request.auth.uid && isCustomer())
        );
      
      // Löschen nur für beteiligte Parteien mit korrekten Rollen
      allow delete: if 
        request.auth != null && 
        (
          (resource.data.providerId == request.auth.uid && isProvider()) || 
          (resource.data.customerId == request.auth.uid && isCustomer()) ||
          isAdmin()
        );
    }
  }
}