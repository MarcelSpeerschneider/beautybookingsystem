rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default: deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Hilfsfunktionen
    
    // Prüft, ob der Benutzer ein Admin ist (optional)
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // Prüft, ob der Benutzer ein Provider ist (prüft Existenz in der providers-Collection)
    function isProvider() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/providers/$(request.auth.uid));
    }
    
    // Prüft, ob der Benutzer ein Customer ist (prüft Existenz in der customers-Collection)
    function isCustomer() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/customers/$(request.auth.uid));
    }
    
    // Prüft, ob es sich um den eigenen Datensatz handelt
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // IMPORTANT NEW RULE: Allow access to user_metadata collection
    match /user_metadata/{docId} {
      allow read, write: if request.auth != null;
    }
    
    // Regeln für Customer Collection
    match /customers/{customerId} {
      // Lesen: Eigene Daten, Provider für Kunden
      allow get: if isOwner(customerId) || isProvider() || isAdmin();
      
      // Erlaubt Abfragen auf die Collection
      allow list: if request.auth != null && 
                  request.query.limit <= 500 && 
                  (isProvider() || isAdmin());
      
      // Erstellen: Nur der Benutzer selbst oder Admins
      allow create: if isOwner(customerId) || isAdmin();
      
      // Aktualisieren: Nur der Benutzer selbst, zugeordnete Provider oder Admins
      allow update: if isOwner(customerId) || isAdmin();
      
      // Löschen: Nur der Benutzer selbst oder Admins
      allow delete: if isOwner(customerId) || isAdmin();
    }
    
    // Regeln für Provider Collection
    match /providers/{providerId} {
      // Lesen: Für jeden zugänglich (Anbieterinfos sind öffentlich)
      allow read: if true;
      
      // MODIFIED: Allow provider creation during registration
      allow create: if request.auth != null && (
        providerId == request.auth.uid || 
        request.resource.data.id == request.auth.uid ||
        isAdmin()
      );
      
      // Aktualisieren: Nur der Provider selbst oder Admins
      allow update: if isOwner(providerId) || isAdmin();
      
      // Löschen: Nur der Provider selbst oder Admins
      allow delete: if isOwner(providerId) || isAdmin();
    }
    
    // Regeln für Services Collection
    match /services/{serviceId} {
      // Lesen: Für jeden zugänglich (Dienstleistungen sind öffentlich)
      allow read: if true;
      
      // Schreiben: Nur der zugehörige Provider oder Admins
      allow write: if 
        request.auth != null && 
        (
          request.resource.data.providerId == request.auth.uid || 
          (resource.data != null && resource.data.providerId == request.auth.uid) || 
          isAdmin()
        );
    }
    
    // Regeln für Appointments Collection - UPDATED WITH BETTER QUERY STRUCTURE
    match /appointments/{appointmentId} {
      // Erlaube direktes Lesen eines Dokuments
      allow get: if 
        request.auth != null && 
        (
          resource.data.providerId == request.auth.uid || 
          resource.data.customerId == request.auth.uid || 
          isAdmin()
        );
      
      // VERBESSERTE REGELN mit korrekter Abfragestruktur
      allow list: if 
        request.auth != null && 
        request.query.limit <= 500 &&
        (
          // Provider können nur nach ihrer eigenen providerId filtern
          (isProvider() && 
           request.query.filters.fieldPath == "providerId" && 
           request.query.filters.op == "==" && 
           request.query.filters.value == request.auth.uid) ||
          
          // Kunden können nur nach ihrer eigenen customerId filtern
          (request.auth != null && 
           request.query.filters.fieldPath == "customerId" && 
           request.query.filters.op == "==" && 
           request.query.filters.value == request.auth.uid) ||
          
          // Admins dürfen alle Dokumente abfragen
          isAdmin()
        );
      
      // Erstellen: Nur angemeldete Benutzer (Customer oder Provider)
      allow create: if 
        request.auth != null && 
        (
          request.resource.data.providerId == request.auth.uid || 
          request.resource.data.customerId == request.auth.uid
        );
      
      // Aktualisieren: Nur zugehörige Provider und Kunden oder Admins
      allow update: if 
        request.auth != null && 
        (
          resource.data.providerId == request.auth.uid || 
          resource.data.customerId == request.auth.uid || 
          isAdmin()
        );
      
      // Löschen: Nur zugehörige Provider oder Admins
      allow delete: if 
        request.auth != null && 
        (
          resource.data.providerId == request.auth.uid || 
          isAdmin()
        );
    }
    
    // Regeln für Reviews Collection
    match /reviews/{reviewId} {
      // Lesen: Für jeden zugänglich (Bewertungen sind öffentlich)
      allow read: if true;
      
      // Erstellen: Nur Kunden können Bewertungen erstellen
      allow create: if 
        request.auth != null && isCustomer() && 
        request.resource.data.customerId == request.auth.uid;
      
      // Aktualisieren: Nur der Ersteller kann seine Bewertung aktualisieren
      allow update: if 
        request.auth != null && 
        resource.data.customerId == request.auth.uid;
      
      // Löschen: Nur der Ersteller oder Admins können Bewertungen löschen
      allow delete: if 
        request.auth != null && 
        (
          resource.data.customerId == request.auth.uid || 
          isAdmin()
        );
    }
    
    // Sichere Regeln für providerCustomerRelations Collection - COMPLETELY UPDATED
    match /providerCustomerRelations/{relationId} {
      // Direktes Lesen eines Dokuments: nur wenn der Benutzer beteiligt ist
      allow get: if 
        request.auth != null && 
        (
          resource.data.providerId == request.auth.uid || 
          resource.data.customerId == request.auth.uid || 
          isAdmin()
        );
      
      // Abfragen auf Collection-Ebene mit verbesserter Syntax
      allow list: if 
        request.auth != null && 
        request.query.limit <= 500 &&
        (
          // Provider können nur nach ihrer eigenen providerId filtern
          (isProvider() && 
           request.query.filters.fieldPath == "providerId" && 
           request.query.filters.op == "==" && 
           request.query.filters.value == request.auth.uid) ||
          
          // Kunden können nur nach ihrer eigenen customerId filtern
          (request.auth != null && 
           request.query.filters.fieldPath == "customerId" && 
           request.query.filters.op == "==" && 
           request.query.filters.value == request.auth.uid) ||
          
          // Admins dürfen alle Dokumente abfragen
          isAdmin()
        );
      
      // Erstellen: nur wenn der Benutzer beteiligt ist
      allow create: if 
        request.auth != null && 
        (
          request.resource.data.providerId == request.auth.uid || 
          request.resource.data.customerId == request.auth.uid
        );
      
      // Aktualisieren: nur der Provider oder Admin
      allow update: if 
        request.auth != null && 
        (
          resource.data.providerId == request.auth.uid || 
          isAdmin()
        );
      
      // Löschen: nur der Provider oder Admin
      allow delete: if 
        request.auth != null && 
        (
          resource.data.providerId == request.auth.uid || 
          isAdmin()
        );
    }
  }
}